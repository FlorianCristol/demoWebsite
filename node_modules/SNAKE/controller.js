var map = require("SNAKE/map.js");
var Player = require("SNAKE/player.js");
module.exports = Controller;

function Controller(gridSide, socket1, socket2) {
	this.socket1 = socket1;
	this.socket2 = socket2;
	this.socket = [];
	this.socket[socket1.id] = socket1;
	this.socket[socket2.id] = socket2;
	this.gridSide = gridSide;
	this.players = [];
	this.playerBook = [];
	this.running = true;
	this.initialPosition = [{
		x: 10,
		y: 0
	}, {
		x: this.gridSide - 10,
		y: 0
	}, {
		x: 10,
		y: this.gridSide
	}, {
		x: this.gridSide - 10,
		y: this.gridSide
	}];
	this.initialDirections = ["RIGHT", "LEFT", "RIGHT", "LEFT"];
	this.growth = 2;
	this.numberOfTicks = 24;
	this.millisPerTick = 1000 / this.numberOfTicks;
	this.ticked = 0;
	this.totalTicks = 5;
	this.playersRemaining = 2;
	this.chrono = new Date();
	this.map = new map(gridSide, gridSide);
	this.spawnFood();
	this.initialiseGames();
	this.gameLoop();

}
//addPLayer takes a socket.id
//A playerbook is created to get the player from the sockerID
Controller.prototype.addPlayer = function(player) {

	this.players.push(new Player(this.initialPosition[this.players.length].x, this.initialPosition[this.players.length].y, 5, this.initialDirections[this.players.length], player));
	this.playerBook[player] = this.players[this.players.length - 1];
	//onsole.log("PLAYER LENGTH "+this.players.length);

};

Controller.prototype.setPlayerMovement = function(player, movement) {
	this.playerBook[player].setDirection(movement);
};

Controller.prototype.movePlayers = function() {
	for (var i = 0, max = this.players.length; i < max; i++) {
		this.players[i].move();
	}
};

Controller.prototype.checkCollisions = function() {
	for (var i = 0, max = this.players.length; i < max; i++) {
		var currentPlayer = this.players[i];
		var head = currentPlayer.getHead();
		var position = {};

		if (head.x < 0) {
			position.x = 59;
			position.y = head.y;
			currentPlayer.setHead(position);
		} else if (head.x > 59) {
			position.x = 0;
			position.y = head.y;
			currentPlayer.setHead(position);
		} else if (head.y > 59) {
			position.x = head.x;
			position.y = 0;
			currentPlayer.setHead(position);
		} else if (head.y < 0) {
			position.x = head.x;
			position.y = 59;
			currentPlayer.setHead(position);
		}

		var head = currentPlayer.getHead();
		var cell = this.map.getCell(head.x, head.y);
		var tail = currentPlayer.getTail();
		if (cell === "food") {
			currentPlayer.grow(this.growth);
			this.map.foodEaten(head);
			this.spawnFood();
			this.updateFood();
		} else if (cell !== "empty" && cell !== undefined) {
			var playerId = currentPlayer.getId();
			//console.log("cell:" + cell);
			//console.log("PLayer who lost:" +playerId);
			this.playerLost(playerId);

		}

		this.map.setCell(head.x, head.y, currentPlayer.getId());
		if (currentPlayer.getGrowth() === 0) {
			this.map.setCell(tail.x, tail.y, "empty")
		}
	}

};
Controller.prototype.playerLost = function(player) {
	this.socket[player].emit('lost', 'lost');
	for (var i = 0, max = this.playersRemaining; i < max; i++) {
		if (this.players[i].getId() !== player) {
			this.socket[this.players[i].getId()].emit('win', 'win');
			this.running = false;
		}
	}
	//delete this.playerBook[player];
	//--playersRemaining;

};
Controller.prototype.getPlayerArray = function(player) {

	return this.playerBook[player].getSnakeArray();
};
Controller.prototype.restart = function() {

};

Controller.prototype.spawnFood = function() {
	var x = parseInt(Math.random() * this.gridSide);
	var y = parseInt(Math.random() * this.gridSide);
	this.map.setCell(x, y, "food");
};

Controller.prototype.getMapGrid = function() {
	return this.map.getMapGrid();
};

Controller.prototype.getFood = function() {
	return this.map.getFood();
};
Controller.prototype.gameLoop = function() {

	var that = this;
	var start = this.chrono.getMilliseconds();
	this.checkCollisions();
	this.checkGameState();
		this.sendInformations();
	this.movePlayers();


	var end = this.chrono.getMilliseconds();
	var nextTick = (this.millisPerTick - (end - start));

	//console.log("next Tick:"+nextTick);
	if (this.running) {
		setTimeout(function() {
			that.gameLoop();
		}, nextTick)
	}

};
Controller.prototype.checkGameState = function() {
	if (this.playersRemaining <= 1) {
		this.socket[this.players[0].getId()].emit('win', 'false');
		this.running = false;
	}
}
Controller.prototype.updateFood = function() {
	var that = this;
	this.socket1.emit('food', that.map.getFood());
	this.socket2.emit('food', that.map.getFood());
}
Controller.prototype.initialiseGames = function() {
	var that = this;
	this.addPlayer(this.socket1.id);
	this.addPlayer(this.socket2.id);
	this.socket1.on('key', function(msg) {
		that.setPlayerMovement(that.socket1.id, msg);

	});
	this.socket2.on('key', function(msg) {
		that.setPlayerMovement(that.socket2.id, msg);

	});
	this.socket1.emit('players', {
		player1: that.socket1.id,
		player2: that.socket2.id
	});
	this.socket2.emit('players', {
		player1: that.socket1.id,
		player2: that.socket2.id
	});
	this.updateFood();
};
Controller.prototype.prepareInformation = function() {
	var theString = '{';
	for (var i = 0, max = this.playersRemaining; i < max; i++) {
		var playerNumber = i + 1;
		var playerSocketId = this.players[i].getId();
		var playerGrowth = this.players[i].getGrowth();
		var playerDir = this.players[i].getDirection();
		theString = theString + '"' + playerNumber + '":' + '{' + '"p' + playerNumber + '":"' + playerSocketId + '",' + '"p' + playerNumber + 'Growth"' + ':"' + playerGrowth + '",' + '"p' + playerNumber + 'Dir"' + ':"' + playerDir + '"}';
		if (i < max - 1) {
			theString = theString + ',';
		}
	}
	theString = theString + '}';
	var json = JSON.parse(theString);
	return json;
}
Controller.prototype.getPlayers = function() {
	var p = [];
	for (var i = 0; i < this.players.length; i++) {
		p.push(this.players[i].getId());
	}

	return p;
}
Controller.prototype.sendInformations = function() {
	var that = this;
	//console.log(this.players[0].getGrowth());
	/*var info = this.prepareInformation();
	for(var i = 0 ; i < this.playersRemaining ; i++){
		this.socket[i].emit('update', {info});
	}
	*/
	
	this.socket1.emit('update', {
		p1: that.socket1.id,
		p2: that.socket2.id,
		p1Growth: that.players[0].getGrowth(),
		p2Growth: that.players[1].getGrowth(),
		p1Dir: that.players[0].getDirection(),
		p2Dir: that.players[1].getDirection(),

	});

	this.socket2.emit('update', {
		p1: that.socket1.id,
		p2: that.socket2.id,
		p1Growth: that.players[0].getGrowth(),
		p2Growth: that.players[1].getGrowth(),
		p1Dir: that.players[0].getDirection(),
		p2Dir: that.players[1].getDirection(),

	});
}